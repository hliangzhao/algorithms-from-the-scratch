//
// Created by hliangzhao on 26/1/23.
//

/**
 * 2、一致性哈希：https://segmentfault.com/a/1190000021199728
 * 传统的从 key 到 server 的映射的问题是，增加/减少 server 时，数据迁移的代价是全量的。
 *
 * 一致性哈希采用环状结构（沿着顺时针方向上找到最近的一个 server 用于存取 key 所对应的数据）。
 * 实现时，可以采用二分查找。
 *
 * 优点：增减 server 时，代价显著降低。
 * 缺点：负载的均衡性难以保证 —— 使用「VNode」来解决。
 * 例如，每个 server 对应 1000 个VNode，m1(a1, a2, ..., a1000); m2(b1, b2, ..., b1000); m3(c1, c2, ..., c1000)。
 * VNode 因为个数很多所以容易保证它们在环上均匀分布。并且隶属于不同 VNode 的数据在不同 server 之间的迁移也很容易实现。
 * 使用 VNode 的另一个好处是：可以按照 server 性能分配 VNode 个数。例如 server 1 很强，可以分 2000 个；server 3 很弱，分 500 个就够了。
 * */